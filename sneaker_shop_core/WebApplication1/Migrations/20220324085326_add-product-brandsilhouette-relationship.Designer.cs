// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220324085326_add-product-brandsilhouette-relationship")]
    partial class addproductbrandsilhouetterelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BrandSilhouetteProduct", b =>
                {
                    b.Property<string>("BrandSilhouetteNameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("BrandSilhouetteNameId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("BrandSilhouetteProduct", (string)null);

                    b.HasData(
                        new
                        {
                            BrandSilhouetteNameId = "Adidas",
                            ProductsId = 1
                        },
                        new
                        {
                            BrandSilhouetteNameId = "Yeezy",
                            ProductsId = 1
                        },
                        new
                        {
                            BrandSilhouetteNameId = "Yeezy 700",
                            ProductsId = 1
                        },
                        new
                        {
                            BrandSilhouetteNameId = "Adidas",
                            ProductsId = 2
                        },
                        new
                        {
                            BrandSilhouetteNameId = "Yeezy",
                            ProductsId = 2
                        },
                        new
                        {
                            BrandSilhouetteNameId = "Yeezy Knit Runner",
                            ProductsId = 2
                        });
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiscountProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b610dd6a-d83e-4937-9e7c-700512654ca2"),
                            ConcurrencyStamp = "922c6ea6-8a80-4536-8ad7-78ee321ab5d9",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = new Guid("0151bf94-13d6-4cb7-a815-43cdb359413b"),
                            ConcurrencyStamp = "6ee12b66-8a42-439e-b93f-342b3130ca0c",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bb64cbe4-5757-40ea-8533-980a148e3369"),
                            ConcurrencyStamp = "d65dc015-cf89-468a-bbb1-b03dd3525c2e",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("096149b4-92aa-4d5f-89ab-579244023ae6"),
                            RoleId = new Guid("b610dd6a-d83e-4937-9e7c-700512654ca2")
                        },
                        new
                        {
                            UserId = new Guid("218a643e-c736-4680-b8fc-6464f3e4b963"),
                            RoleId = new Guid("0151bf94-13d6-4cb7-a815-43cdb359413b")
                        },
                        new
                        {
                            UserId = new Guid("3ebc9915-5931-471b-8cdb-a1b5b10b6088"),
                            RoleId = new Guid("bb64cbe4-5757-40ea-8533-980a148e3369")
                        },
                        new
                        {
                            UserId = new Guid("fa12454e-ebc4-4eb8-9290-93dddcc94bde"),
                            RoleId = new Guid("bb64cbe4-5757-40ea-8533-980a148e3369")
                        },
                        new
                        {
                            UserId = new Guid("f408ea82-601a-4573-9a68-c0e31fd87623"),
                            RoleId = new Guid("bb64cbe4-5757-40ea-8533-980a148e3369")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.BrandSilhouette", b =>
                {
                    b.Property<string>("NameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NameId");

                    b.ToTable("BrandSilhouttes", (string)null);

                    b.HasData(
                        new
                        {
                            NameId = "Adidas",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6352),
                            Icon = "adidas.png",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "Adi Dassler founded adidas in 1949 in Herzogenaurach, Germany. Building on the reputation of the brand’s spiked running shoes and football cleats, Dassler turned adidas into a global icon, redefining sneakers and apparel in the process. Today, adidas is considered one of the world’s most influential brands, responsible for the Stan Smith, Yeezy sneakers and more.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Nike",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6554),
                            Icon = "nike.png",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "Founded by Bill Bowerman and Phil Knight in 1964, Nike is synonymous with performance and innovation. Alongside its apparel offerings, the sportswear giant is responsible for a number of iconic sneakers, including the Air Force 1, the Air Max franchise and more. Today, Nike is among the world’s most recognized brands, identified by its wordmark and Swoosh logo.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Supreme",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6590),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "Founded by James Jebbia in 1994, Supreme is a New York-based skate brand known for its subcultural references and controversial graphics. Today, Supreme is considered one of style’s most influential voices, blurring the lines between streetwear and luxury through collaborations with artists, fashion houses and sneaker brands.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Ultra 4D",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6880),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6576),
                            Icon = "jordan.png",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "In 1984, Nike unveiled the Air Jordan 1, a basketball sneaker designed by Peter Moore for a young Michael Jordan. The iconic silhouette transcended sneakers and sports, altering the trajectory of style forever. Today, Michael Jordan’s namesake brand continues to inspire sportswear and style movements around the world through new releases, retro drops and unexpected collaborations.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Yeezy",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6604),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "In late 2013, Kanye West and adidas announced their forthcoming partnership. In 2015, the two delivered on this news, arriving in the form of Yeezy Season 1, a collection of sneakers and apparel debuted at New York Fashion Week. Since the first collection, Yeezy has influenced style movements worldwide.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Fear of God Essentials",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6619),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Story = "In 2018, Jerry Lorenzo launched Fear of God Essentials, a pared-back version of Fear of God. Each seasonal collection brings the line’s concept into sharper focus, uniting elevated sportswear basics with subdued shades and minimal branding.",
                            Type = "Brand"
                        },
                        new
                        {
                            NameId = "Yeezy 350",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6762),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Yeezy 450",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6702),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Yeezy 700",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6632),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Yeezy Foam Runner",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6688),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Yeezy Knit Runner",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6674),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan 1",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6777),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan 11",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6867),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan 4",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6791),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan 5",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6838),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Air Jordan 6",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6853),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Little Posite One",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6909),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "LeBron 18",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6895),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Zoom KD 12",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6936),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        },
                        new
                        {
                            NameId = "Kyrie 5",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(6923),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Silhouette"
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.CartItem", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CartSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartSessionId");

                    b.HasIndex("CartSessionId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.CartSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CartSessions", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentDetailId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDetailId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("paymentDetails");
                });

            modelBuilder.Entity("WebApplication1.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Releasedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wallpaper")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Boots",
                            Color = "Tan",
                            CoverImage = "yeezy-boost-700-mauve-1.jpeg",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(7097),
                            Description = "The adidas Yeezy Boost 700 V2 ‘Mauve’ brings back a popular colorway first seen on a Yeezy Boost 700 release from 2018. The sneaker’s titular hue is executed on a textured mesh upper with arcing no-sew skins along the quarter panel and greenish-grey suede overlays throughout. Responsive cushioning comes courtesy of a full-length drop-in Boost midsole, housed within a sculpted polyurethane carrier. Underfoot, a herringbone-traction rubber outsole provides optimal grip.",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeezy Boost 700 V2 'Mauve'",
                            Releasedate = new DateTime(2021, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sneaker",
                            UserType = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Category = "LifeStyle",
                            Color = "Sulfur",
                            CoverImage = "yeezy-knit-runner-sulfur-1.jpeg",
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(7383),
                            Description = "The adidas Yeezy Knit Runner ‘Sulfur’ delivers the debut colorway of Kanye West’s sock-like silhouette, which launched exclusively through the artist’s Yeezy Supply site. The fully knit build, rendered in a neutral tan shade with a contrasting mustard yellow finish throughout the majority of the upper, utilizes slip-on construction devoid of exterior branding. Embellishments are limited to sizing information stamped on the lateral collar. The sneaker rides on a durable rubber outsole in a matching yellow finish, featuring a modified herringbone tread and adidas branding under the heel.",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeezy Knit Runner 'Sulfur'",
                            Releasedate = new DateTime(2021, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sneaker",
                            UserType = "Men"
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "Image");

                    b.ToTable("ProductImages", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-1.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-2.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-3.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-4.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-5.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-6.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-7.jpeg"
                        },
                        new
                        {
                            ProductId = 1,
                            Image = "yeezy-boost-700-mauve-8.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-1.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-2.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-3.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-4.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-5.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-6.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-7.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-8.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-9.jpeg"
                        },
                        new
                        {
                            ProductId = 2,
                            Image = "yeezy-knit-runner-sulfur-10.jpeg"
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Size")
                        .IsUnique();

                    b.ToTable("ProductInventory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8170),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Quantity = 100,
                            Size = "8"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8174),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Quantity = 100,
                            Size = "8.5"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8175),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Quantity = 100,
                            Size = "9"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8176),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Quantity = 100,
                            Size = "8"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8177),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Quantity = 100,
                            Size = "8.5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8177),
                            ModifiledAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Quantity = 100,
                            Size = "9"
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductPrice", b =>
                {
                    b.Property<int>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductInventoryId", "EffectTime");

                    b.ToTable("ProductPrices", (string)null);

                    b.HasData(
                        new
                        {
                            ProductInventoryId = 1,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8194),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8194),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 350.0
                        },
                        new
                        {
                            ProductInventoryId = 2,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8196),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8195),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 385.0
                        },
                        new
                        {
                            ProductInventoryId = 3,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8197),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8197),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 326.0
                        },
                        new
                        {
                            ProductInventoryId = 4,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8198),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8198),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 540.0
                        },
                        new
                        {
                            ProductInventoryId = 5,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8199),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8199),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 675.0
                        },
                        new
                        {
                            ProductInventoryId = 6,
                            EffectTime = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8200),
                            CreatedAt = new DateTime(2022, 3, 24, 15, 53, 25, 396, DateTimeKind.Local).AddTicks(8200),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 568.0
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CartSessionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartSessionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("096149b4-92aa-4d5f-89ab-579244023ae6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eed9308f-4b06-4b70-b035-4f75d5db2b04",
                            Email = "superadmin@superadmin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEANkqix16RVsDqIUFpNzVpE9k33eKhkKKHd+3RULNd2+rS3n4e68tojOxdzAnxmJsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7873bad0-8e6a-4597-9249-892e246fce0c",
                            TwoFactorEnabled = false,
                            UserName = "superAdmin"
                        },
                        new
                        {
                            Id = new Guid("218a643e-c736-4680-b8fc-6464f3e4b963"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d486343d-eeab-4903-8c8e-a7a8abb5c790",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIf7yL1L+2kSpnvr+9+cPUp2nnJxS9Y5fzp+iqSMMen+xzwOYHiQLMScCsYpr/1YCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "656bad44-c1a4-40c5-825a-404c8bb205c1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b9685628-aa98-4a0f-9a97-f872a932f211"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c268ca20-07b9-497e-a185-b81e339ed035",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN7DBfCZVxsyIztg+bH+574U0zk2ngza478LWYfeo3urFM2jhAgtkb38pJCxq0DyJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18e0c6e0-de81-4c8e-b853-b322ce8b3ad5",
                            TwoFactorEnabled = false,
                            UserName = "defaultuser"
                        },
                        new
                        {
                            Id = new Guid("3ebc9915-5931-471b-8cdb-a1b5b10b6088"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c163be85-6502-4e4f-bb68-0679f4b896b6",
                            Email = "customer1@customer1.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJAndRP03PfV3t6FgqcvD7Aardo6oStj/n6XHrlViR9i7tPylHlmI/fqLxMeZyQe7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05904173-dd4d-4db2-bebb-9cc6b34ee521",
                            TwoFactorEnabled = false,
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = new Guid("fa12454e-ebc4-4eb8-9290-93dddcc94bde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12867106-b437-4eea-8ddc-004dc3bd57ce",
                            Email = "customer2@customer2.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGHxmitiahfyrExXy61ZOZZR8GrqYPbv6a8Qsq2y6IfucTFkPMuHAIxK6nPkBlSm5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91e3239b-a881-453f-a167-2311d3237e23",
                            TwoFactorEnabled = false,
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = new Guid("f408ea82-601a-4573-9a68-c0e31fd87623"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d73a39c-b935-40bb-a3ed-e7f5853aa385",
                            Email = "customer3@customer3.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDk/T3h+UjHOuvfF+cONLP3CFVngbxk+T0M1mnQLslLXBZ/7RI2Eej04l2Sa8SJ7+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d2d1951-5e13-4ab4-88da-06b8ac8552f3",
                            TwoFactorEnabled = false,
                            UserName = "customer3"
                        });
                });

            modelBuilder.Entity("WebApplication1.Entities.UserPayment", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountNumber", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPayments", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.UserShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Address")
                        .IsUnique();

                    b.ToTable("UserShippingAddress", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities.WantedProduct", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WantedProducts", (string)null);
                });

            modelBuilder.Entity("BrandSilhouetteProduct", b =>
                {
                    b.HasOne("WebApplication1.Entities.BrandSilhouette", null)
                        .WithMany()
                        .HasForeignKey("BrandSilhouetteNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.HasOne("WebApplication1.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Entities.CartItem", b =>
                {
                    b.HasOne("WebApplication1.Entities.CartSession", "Session")
                        .WithMany("Items")
                        .HasForeignKey("CartSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Product", "Product")
                        .WithMany("CardItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebApplication1.Entities.CartSession", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", null)
                        .WithMany("sessions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApplication1.Entities.Order", b =>
                {
                    b.HasOne("WebApplication1.Entities.PaymentDetail", "PaymentDetail")
                        .WithOne("Order")
                        .HasForeignKey("WebApplication1.Entities.Order", "PaymentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.User", "User")
                        .WithMany("orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities.OrderItem", b =>
                {
                    b.HasOne("WebApplication1.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductImage", b =>
                {
                    b.HasOne("WebApplication1.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductInventory", b =>
                {
                    b.HasOne("WebApplication1.Entities.Product", "Product")
                        .WithMany("ProductInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductPrice", b =>
                {
                    b.HasOne("WebApplication1.Entities.ProductInventory", "ProductInventory")
                        .WithMany("Price")
                        .HasForeignKey("ProductInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInventory");
                });

            modelBuilder.Entity("WebApplication1.Entities.User", b =>
                {
                    b.HasOne("WebApplication1.Entities.CartSession", "CartSession")
                        .WithMany()
                        .HasForeignKey("CartSessionId");

                    b.Navigation("CartSession");
                });

            modelBuilder.Entity("WebApplication1.Entities.UserPayment", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", "User")
                        .WithMany("userPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities.UserShippingAddress", b =>
                {
                    b.HasOne("WebApplication1.Entities.User", "User")
                        .WithMany("shippingAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities.WantedProduct", b =>
                {
                    b.HasOne("WebApplication1.Entities.Product", "Product")
                        .WithMany("WantedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.User", "User")
                        .WithMany("WantedProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities.CartSession", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WebApplication1.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WebApplication1.Entities.PaymentDetail", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebApplication1.Entities.Product", b =>
                {
                    b.Navigation("CardItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInventory");

                    b.Navigation("WantedProducts");
                });

            modelBuilder.Entity("WebApplication1.Entities.ProductInventory", b =>
                {
                    b.Navigation("Price");
                });

            modelBuilder.Entity("WebApplication1.Entities.User", b =>
                {
                    b.Navigation("WantedProducts");

                    b.Navigation("orders");

                    b.Navigation("sessions");

                    b.Navigation("shippingAddresses");

                    b.Navigation("userPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
